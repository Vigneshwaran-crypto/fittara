/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.0 src/Assets/3dFiles/mug.glb -o src/Component/Mug.jsx -r public 
*/
import React, { useRef, useState } from "react";
import { Decal, useGLTF, useTexture } from "@react-three/drei";
import mugOnj from "../Assets/3dFiles/mug.glb";
import userImg from "../Assets/auth/userProfile.png";
import { useControls } from "leva";
import { degToRad } from "three/src/math/MathUtils.js";

const Mug = (props) => {
  const { nodes, materials } = useGLTF(mugOnj);
  const texture = useTexture(userImg);
  const decal = useRef();

  useControls({
    angle: {
      min: degToRad(60),
      max: degToRad(300),
      value: Math.PI / 4,
      step: 0.01,
      onChange: (val) => {
        console.log("angle change value :", val);

        const x = Math.cos(val);
        const z = Math.sin(val);

        const rot = Math.atan2(x, z);

        setRotation(() => [0, rot, 0]);
        setPosition([x, position[1], z]);
      },
    },
    posY: {
      min: 0,
      max: 3,
      value: 1.8,
      step: 0.01,
      onChange: (val) => {
        setPosition([position[0], val, position[2]]);
      },
    },
    scale: {
      min: 0.5,
      max: 3,
      value: 1.5,
      step: 0.01,
      onChange: (val) => {
        setScale(() => [val, val, 1.5]);
      },
    },
  });

  const [position, setPosition] = useState([0, 1.8, 1]);
  const [rotation, setRotation] = useState([0, 0, 0]);
  const [scale, setScale] = useState([1.5, 1.5, 1.5]);

  return (
    <group {...props} dispose={null}>
      <mesh
        geometry={nodes.Arc001_1.geometry}
        material={materials["01___Default-2"]}
      />
      <mesh
        geometry={nodes.Arc001_1_1.geometry}
        material={materials["02___Default-2"]}
      />
      <mesh
        geometry={nodes.Arc001_1_2.geometry}
        material={materials["02___Default"]}
      />
      <mesh
        geometry={nodes.Arc001_1_3.geometry}
        material={materials["01___Default"]}
      />
      <mesh
        geometry={nodes.Arc001_1_4.geometry}
        // material={materials.printable}
      >
        <meshBasicMaterial transparent opacity={0} />

        <Decal
          debug
          ref={decal}
          position={position}
          rotation={rotation}
          scale={scale}
        >
          <meshBasicMaterial
            map={texture}
            polygonOffset
            polygonOffsetFactor={-1} //the mesh should take procedence on orginal
          />
        </Decal>
      </mesh>
    </group>
  );
};

export default Mug;

useGLTF.preload(mugOnj);
